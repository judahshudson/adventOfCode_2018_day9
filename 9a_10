

def rangeInclusive(start, stop, step=1):
        return range(start, stop+step, step)

numPlayers = 418
lastMarblePoints = 71339
currentMarbleIndex = 0
currentMarbleValue = 0
circle = [0]    
score = {}      

for p in rangeInclusive(1, numPlayers):
        score[p] = 0

while currentMarbleValue < lastMarblePoints:    
        for player in range(1, numPlayers+1):     
                currentMarbleValue += 1
                if currentMarbleValue <= lastMarblePoints:      
                        if currentMarbleValue % 23 == 0:        
                                score[player] += currentMarbleValue 
                                if currentMarbleIndex < 7:            
                                        excptnIndex = (len(circle)) - (7-currentMarbleIndex)
                                else:
                                        excptnIndex = currentMarbleIndex-7       
                                del circle[excptnIndex]                
                                currentMarbleIndex = excptnIndex 
                                #print("[{}]  {}".format(player, circle))                
        
                        else:
                                if currentMarbleIndex == len(circle)-1:                 
                                        currentMarbleIndex = 1
                                elif (len(circle)-1) - currentMarbleIndex == 1:        
                                        currentMarbleIndex = len(circle)
                                else:                                                  
                                        currentMarbleIndex += 2 
                                circle.insert(currentMarbleIndex, currentMarbleValue)
                                #print("[{}]  {}".format(player, circle))
                                
winner = -1
highScore = 0
for p in rangeInclusive(1, numPlayers):
        if score[p] > highScore:
                highScore = score[p]
                winner = p
        
print("Player ", winner, " is the winner with a score of: ", highScore)


